{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nicenicegame/Desktop/nice-workspace/bcbk2020-frontend/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useMemo } from 'react';\nimport { Provider } from 'mobx-react';\nimport { NextSeo } from 'next-seo';\nimport App from 'next/app';\nimport RootLayout from 'core/components/RootLayout';\nimport { DEFAULT_LOCALE, STORAGE_LOCALE_KEY } from 'core/i18n/constants';\nimport useSetLocale from 'core/i18n/hooks/useSetLocale';\nimport getLocalStorage from 'core/localStorage/getLocalStorage';\nimport initializeStore from 'core/store/utils/initializeStore';\n\nconst MyApp = ({\n  Component,\n  pageProps,\n  stores\n}) => {\n  const setLocale = useSetLocale();\n  useEffect(() => {\n    const jssStyles = document.querySelector('#jss-server-side');\n    if (jssStyles && jssStyles.parentNode) jssStyles.parentNode.removeChild(jssStyles);\n  }, []);\n  const mobxStores = useMemo(() => {\n    const isServer = true;\n    return isServer ? stores : initializeStore(stores);\n  }, []);\n  const locale = useMemo(() => {\n    const isServer = true;\n    return isServer ? DEFAULT_LOCALE : getLocalStorage(STORAGE_LOCALE_KEY) || DEFAULT_LOCALE;\n  }, []);\n  useEffect(() => {\n    setLocale(locale);\n  }, [locale]);\n  return /*#__PURE__*/_jsxDEV(Provider, _objectSpread(_objectSpread({}, mobxStores), {}, {\n    children: /*#__PURE__*/_jsxDEV(RootLayout, {\n      children: [/*#__PURE__*/_jsxDEV(NextSeo, {\n        title: \"Barcamp Bangkhen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\nMyApp.getInitialProps = async ctx => {\n  const stores = initializeStore();\n  ctx.stores = stores;\n  const appProps = await App.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    stores\n  });\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/nicenicegame/Desktop/nice-workspace/bcbk2020-frontend/pages/_app.tsx"],"names":["React","useEffect","useMemo","Provider","NextSeo","App","RootLayout","DEFAULT_LOCALE","STORAGE_LOCALE_KEY","useSetLocale","getLocalStorage","initializeStore","MyApp","Component","pageProps","stores","setLocale","jssStyles","document","querySelector","parentNode","removeChild","mobxStores","isServer","locale","getInitialProps","ctx","appProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AAEA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,GAAP,MAA0C,UAA1C;AAEA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,qBAAnD;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;;AAMA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAD,KAAwD;AACpE,QAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAlB;AACA,QAAIF,SAAS,IAAIA,SAAS,CAACG,UAA3B,EAAuCH,SAAS,CAACG,UAAV,CAAqBC,WAArB,CAAiCJ,SAAjC;AACxC,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMK,UAAU,GAAGpB,OAAO,CAAC,MAAM;AAC/B,UAAMqB,QAAQ,OAAd;AAEA,WAAOA,QAAQ,GAAGR,MAAH,GAAYJ,eAAe,CAACI,MAAD,CAA1C;AACD,GAJyB,EAIvB,EAJuB,CAA1B;AAMA,QAAMS,MAAM,GAAGtB,OAAO,CAAC,MAAM;AAC3B,UAAMqB,QAAQ,OAAd;AAEA,WAAOA,QAAQ,GACXhB,cADW,GAEXG,eAAe,CAACF,kBAAD,CAAf,IAAuCD,cAF3C;AAGD,GANqB,EAMnB,EANmB,CAAtB;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,SAAS,CAACQ,MAAD,CAAT;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIA,sBACE,QAAC,QAAD,kCAAcF,UAAd;AAAA,2BACE,QAAC,UAAD;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD,oBAAeR,SAAf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAlCD;;AAoCAF,KAAK,CAACa,eAAN,GAAwB,MAAOC,GAAP,IAAmC;AACzD,QAAMX,MAAM,GAAGJ,eAAe,EAA9B;AACAe,EAAAA,GAAG,CAACX,MAAJ,GAAaA,MAAb;AAEA,QAAMY,QAAQ,GAAG,MAAMtB,GAAG,CAACoB,eAAJ,CAAoBC,GAApB,CAAvB;AAEA,yCACKC,QADL;AAEEZ,IAAAA;AAFF;AAID,CAVD;;AAYA,eAAeH,KAAf","sourcesContent":["import React, { useEffect, useMemo } from 'react'\n\nimport { Provider } from 'mobx-react'\nimport { NextSeo } from 'next-seo'\nimport App, { AppContext, AppProps } from 'next/app'\n\nimport RootLayout from 'core/components/RootLayout'\nimport { DEFAULT_LOCALE, STORAGE_LOCALE_KEY } from 'core/i18n/constants'\nimport useSetLocale from 'core/i18n/hooks/useSetLocale'\nimport getLocalStorage from 'core/localStorage/getLocalStorage'\nimport initializeStore from 'core/store/utils/initializeStore'\n\ninterface Props {\n  stores: Record<string, any>\n}\n\nconst MyApp = ({ Component, pageProps, stores }: AppProps & Props) => {\n  const setLocale = useSetLocale()\n\n  useEffect(() => {\n    const jssStyles = document.querySelector('#jss-server-side')\n    if (jssStyles && jssStyles.parentNode) jssStyles.parentNode.removeChild(jssStyles)\n  }, [])\n\n  const mobxStores = useMemo(() => {\n    const isServer = typeof window === 'undefined'\n\n    return isServer ? stores : initializeStore(stores)\n  }, [])\n\n  const locale = useMemo(() => {\n    const isServer = typeof window === 'undefined'\n\n    return isServer\n      ? DEFAULT_LOCALE\n      : getLocalStorage(STORAGE_LOCALE_KEY) || DEFAULT_LOCALE\n  }, [])\n\n  useEffect(() => {\n    setLocale(locale)\n  }, [locale])\n\n  return (\n    <Provider {...mobxStores}>\n      <RootLayout>\n        <NextSeo title=\"Barcamp Bangkhen\" />\n        <Component {...pageProps} />\n      </RootLayout>\n    </Provider>\n  )\n}\n\nMyApp.getInitialProps = async (ctx: AppContext & Props) => {\n  const stores = initializeStore()\n  ctx.stores = stores\n\n  const appProps = await App.getInitialProps(ctx)\n\n  return {\n    ...appProps,\n    stores,\n  }\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}